<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3 Page Template</title>
        <script type="text/javascript" src="/javascripts/d3.v3.js"></script>
        <style>
            body {
                margin-top: 20px;
                margin-left: 20px;
                margin-right: 30%;
                font-family: 'Avenir';
                font-size: 18px; 
                color: "#222";
            }

        </style>
    </head>
    <body>

    <p>This section introduces layouts in D3.  This page shows how a pie or ring chart can be generated.  D3 automatically re-orders the data such that the largest value makes up the first wedge/slice of the ring.  The chart begins with 45 at the 12 oâ€™clock position and follows in descending order in a clockwise fashion from there.</p>

    <script type="text/javascript">

        var dataset = [ 5, 10, 20, 45, 6, 25 ];

        var pie = d3.layout.pie();

        // this gets called through pie(dataset) later

        var w = 300; 
        var h = 300;

        var outerRadius = w/2;
        var innerRadius = w/3;

        // if innerRadius is set at zero, this is a pie chart
        // if we define a value here such as w/3, then the chart becomes a ring chart.

        var color = d3.scale.category10();

        // this is a D3 method for generating colours
        // it is a quick way of varying colours when you are prototyping
        // effectively, this creates an ordinal scale of colours
        // the output range here is 10 different colours
        // this gets called later when the arcs are drawn

        var arc = d3.svg.arc()
                .innerRadius(innerRadius)
                .outerRadius(outerRadius);

        var svg = d3.select("body")
                    .append("svg")
                    .attr("width", w)
                    .attr("height", h);

        var arcs = svg.selectAll("g.arc")
                    .data(pie(dataset))
                    .enter()
                    .append("g")
                    .attr("class", "arc")
                    .attr("transform", "translate(" + outerRadius + "," + outerRadius + ")");

        // these are going to be the newly created groups of arcs that will define a wedge
        // that is what this variable is referencing
        // note that the data that is fed in references the d3.layout.pie function
        // effectively in order to easily define the pie.

        arcs.append("path")
            .attr("fill", function(d, i) {
                return color(i); 
            })
            .attr("d", arc);  // nb the path description is held in this attribute, so
        // the arc generator is called based on the data bound to this element
        // this is where the arcs are actually drawn.
        
        arcs.append("text")
            .attr("transform", function(d) {
                return "translate(" + arc.centroid(d) + ")";
            })
            .attr("text-anchor", "middle")
            .text(function(d) {
                return d.value;
            });

        // here we generate labels for the arcs.  d.value is referenced since we are 
        // using the dataset generated via pie(dataset) and that object stores the
        // actual value in a value key
        // the positioning via .centroid(d) is the calculated centre-point of the shape.


    </script>
    </body>
</html>