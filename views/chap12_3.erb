<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3 Page Template</title>
        <script type="text/javascript" src="/javascripts/d3.v3.js"></script>
        <style>
            body {
                margin-top: 20px;
                margin-left: 20px;
                margin-right: 30%;
                font-family: 'Avenir';
                font-size: 18px; 
                color: "#222";
            }

        </style>
    </head>
    <body>

    <p>This section introduces the GeoJSON geographic data-set.  Here, we are learning about Chloropleths and how you add points.</p>

    <script type="text/javascript">
        var w = 500;
        var h = 300;

        var svg = d3.select("body")
        .append("svg")
        .attr("width", w)
        .attr("height", h);

        var color = d3.scale.quantize()
                    .range(["rgb(237,248,233)", "rgb(186,228,179)",
                     "rgb(116,196,118)", "rgb(49,163,84)","rgb(0,109,44)"]);

        var projection = d3.geo.albersUsa()
                               .translate([w/2, h/2])
                               .scale([500]);

        // the path generator
        var path = d3.geo.path()
                         .projection(projection);

        // here the data will be grouped into one of the 5 colour buckets defined above
        // this is what the quantize scale will help us to achieve
        // nb this currently just defines the output range
        // the input domain will be clearer when the data is pulled in and loaded

        d3.csv("data/us-ag-productivity-2004.csv", function(data) {

            color.domain([
                d3.min(data, function(d) { return d.value; }),
                d3.max(data, function(d) { return d.value; })
            ]);

            // here, the first thing we done on loading the data is define the input domain
            // the next thing we want to do is to merge this agricultural productivity 
            // data with the JSON geodata
            // reason being, we can only bind one set of data to elements at a time

            d3.json("data/us-states.json", function(json) {

            // we are now in the callback function having loaded the geojson data
            // we start by iterating over the agricultural data file though
            // hence data.length rather than json.length here.. 

               for (var i = 0; i < data.length; i++) {
            
                    var dataState = data[i].state;
                    var dataValue = parseFloat(data[i].value);
                    // this converts the data value from a string to a float
                    // now we need to find the same state inside the geojson file

                    for (var j = 0; j < json.features.length; j++) {

                        var jsonState = json.features[j].properties.name;

                            if (dataState == jsonState) {
                                json.features[j].properties.value = dataValue;
                                // here we copy the value into the geojson file
                               break;
                            }
                    }
                }

                // now draw the paths, but set the fill in a dynamic fashion

                svg.selectAll("path")
                   .data(json.features)
                   .enter()
                   .append("path")
                   .attr("d", path)
                   .style("fill", function(d) {
                        var value = d.properties.value;

                        if (value) {
                            // if value exists…
                            return color(value);
                        } else {
                            // if value is undefined…
                            return "#ccc";
                        }
                });

                d3.csv("data/us-cities.csv", function(cityData) {

                    svg.selectAll("circle")
                        .data(cityData)
                        .enter()
                        .append("circle")
                        .attr("cx", function(d) {
                            return projection([d.lon, d.lat])[0]; // this converts long/lat to x
                        })
                        .attr("cy", function(d) {
                            return projection([d.lon, d.lat])[1]; // this converts long/lat to y 
                        })
                        .attr("r", function(d) {
                            return Math.sqrt(parseInt(d.population) * 0.00004); // converts string to integer
                        })
                        .style("fill", "yellow")
                        .style("opacity", 0.75);

                });

            });
        });


    </script>
    </body>
</html>