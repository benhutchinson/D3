<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3 Page Template</title>
        <script type="text/javascript" src="/javascripts/d3.v3.js"></script>
        <style>
            body {
                margin-top: 20px;
                margin-left: 20px;
                margin-right: 30%;
                font-family: 'Avenir';
                font-size: 18px; 
                color: "#222";
            }

            .axis path,
            .axis line {
                fill: none;
                stroke: black;
                shape-rendering: crispEdges;
            }

/*            these are SVG properties that we are styling here hence fill rather than color, etc*/

            .axis text {
                font-family: sans-serif;
                font-size: 11px;
            }

            svg text {
                pointer-events: none;
            }

            rect {
                -moz-transition: all 0.3s;
                -o-transition: all 0.3s;
                -webkit-transition: all 0.3s;
                transition: all 0.3s;
            }

            rect:hover {
                fill: orange;
            }

        </style>
    </head>
    <body>

    <p>Tooltips</p>

    <script type="text/javascript">

        //Width and height
        var w = 600;
        var h = 250;
        
        var dataset = [ 5, 10, 13, 19, 21, 25, 22, 18, 15, 13,
                        11, 12, 15, 20, 18, 17, 16, 18, 23, 25 ];

        var xScale = d3.scale.ordinal()
                        .domain(d3.range(dataset.length))
                        .rangeRoundBands([0, w], 0.05);

        var yScale = d3.scale.linear()
                        .domain([0, d3.max(dataset)])
                        .range([0, h]);
        
        //Create SVG element
        var svg = d3.select("body")
                    .append("svg")
                    .attr("width", w)
                    .attr("height", h);

        //Create bars
        svg.selectAll("rect")
            .data(dataset)
            .enter()
            .append("rect")
            .attr("x", function(d, i) {
                return xScale(i);
            })
            .attr("y", function(d) {
                return h - yScale(d);
            })
            .attr("width", xScale.rangeBand())
            .attr("height", function(d) {
                return yScale(d);
            })
            .attr("fill", function(d) {
                return "rgb(0, 0, " + (d * 10) + ")";
            })
            .on("click", function(d) {
                console.log(d);
                sortBarsAndText();
            });

        // we are calling a sortBars() function on a click on the bars
        // but hypothetically it could be attached to a separate button or
        // other element

        //Create labels
        svg.selectAll("text")
            .data(dataset)
            .enter()
            .append("text")
            .text(function(d) {
                return d;
            })
            .attr("text-anchor", "middle")
            .attr("x", function(d, i) {
                return xScale(i) + xScale.rangeBand() / 2;
            })
            .attr("y", function(d) {
                return h - yScale(d) + 14;
            })
            .attr("font-family", "sans-serif")
            .attr("font-size", "11px")
            .attr("fill", "white");

        // these functions define the sort
        // note the delay implemented in the transition at the element level
        // i.e. each bar (data point) is effectively delayed by a different duration
        // hence visually, you see each bar sort itself in an order

        var sortOrder = false; 
        
        var sortBarsAndText = function() {

            sortOrder = !sortOrder; 

            svg.selectAll("rect")
                .sort(function(a, b) {
                    if (sortOrder) {
                        return d3.ascending(a, b);
                    } else {
                        return d3.descending(a, b);
                    }
                })
                .transition()
                .delay(function(d,i) {
                    return i * 50;
                })
                .duration(1000)
                .attr("x", function(d, i) {
                    return xScale(i);
                });

            svg.selectAll("text")
                .sort(function(a, b) {
                    if (sortOrder) {
                        return d3.ascending(a, b);
                    } else {
                        return d3.descending(a, b);
                    }
                })
                .transition()
                .delay(function(d,i) {
                    return i * 50;
                })
                .duration(1000)
                .attr("x", function(d, i) {
                    return xScale(i) + xScale.rangeBand() / 2;
                });
        };

    </script>
    </body>
</html>