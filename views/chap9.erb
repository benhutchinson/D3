<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3 Page Template</title>
        <script type="text/javascript" src="/javascripts/d3.v3.js"></script>
        <style>
            body {
                margin-top: 20px;
                margin-left: 20px;
                margin-right: 30%;
                font-family: 'Avenir';
                font-size: 18px; 
                color: "#222";
            }

            .axis path,
            .axis line {
                fill: none;
                stroke: black;
                shape-rendering: crispEdges;
            }

/*            these are SVG properties that we are styling here hence fill rather than color, etc*/

            .axis text {
                font-family: sans-serif;
                font-size: 11px;
            }
        </style>
    </head>
    <body>

    <span>Ordinal scale, updating data sets, introducing transitions.</span>
    <p>Click this text to update the chart with new data values as many times as you wish.</p>

    <script type="text/javascript">

        var dataset = [ 5, 10, 13, 19, 21, 25, 22, 18, 15, 13,
                11, 12, 15, 20, 18, 17, 16, 18, 23, 25 ];

        var w = 600;
        var h = 250;

        var svg = d3.select("body")
                    .append("svg")
                    .attr("width", w)
                    .attr("height", h);

        var xScale = d3.scale.ordinal()
                        .domain(d3.range(dataset.length))
                        .rangeRoundBands([0,w], 0.05);

        var yScale = d3.scale.linear()
                        .domain([0, d3.max(dataset)])
                        .range([0, h]);

        svg.selectAll("rect")
                    .data(dataset)
                    .enter()
                    .append("rect")
                    .attr("x", function(d,i) { return xScale(i); })
                    .attr("y", function(d) { return h - yScale(d); })
                    .attr("width", xScale.rangeBand())
                    .attr("height", function(d) { return yScale(d); })
                    .attr("fill", function(d) { return "rgb(0,0," + (d * 10) + ")"})

        svg.selectAll("text")
           .data(dataset)
           .enter()
           .append("text")
           .text(function(d) {
                return d;
           })
           .attr("text-anchor", "middle")
           .attr("x", function(d, i) {
                return xScale(i) + xScale.rangeBand() / 2;
           })
           .attr("y", function(d) {
                return h - yScale(d) + 14;
           })
           .attr("font-family", "sans-serif")
           .attr("font-size", "11px")
           .attr("fill", "white");

        d3.select("p")
            .on("click", function() {

                // sets a new dataset

                var numValues = dataset.length; 
                dataset = [];
                maxValue = 25; 

                for (var i = 0; i < numValues; i++) {
                    var newNumber = Math.floor(Math.random()*maxValue);
                    dataset.push(newNumber);
                };

                // yScale needs updating to reflect new dataset input range
                // nb. the output range does not need changing
                // as svg chart dimensions haven't changed

                var yScale = d3.scale.linear()
                                    .domain([0, d3.max(dataset)])
                                    .range([0, h]);

                // binds the new dataset and then updates visuals
                // note that the x and width do not need adjusting

                svg.selectAll("rect")
                    .data(dataset)
                    .transition()
                    .delay(function(d,i) {
                        return i / dataset.length * 1000;
                    })
                    .ease("elastic")
                    .duration(700)
                    .attr("y", function(d) { return h - yScale(d); })
                    .attr("height", function(d) { return yScale(d); })
                    .attr("fill", function(d) { return "rgb(0, 0, " + (d * 10) + ")"; });

                svg.selectAll("text")
                    .data(dataset)
                    .transition()
                    .delay(function(d,i) {
                        return i / dataset.length * 1000;
                    })
                    .ease("elastic")
                    .duration(700)
                    .text(function(d) { return d; })
                    .attr("x", function(d,i) { return xScale(i) + xScale.rangeBand()/2; })
                    .attr("y", function(d) { return h - yScale(d) + 14; })
            });

    </script>
    </body>
</html>