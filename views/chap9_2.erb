<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>D3 Page Template</title>
        <script type="text/javascript" src="/javascripts/d3.v3.js"></script>
        <style>
            body {
                margin-top: 20px;
                margin-left: 20px;
                margin-right: 30%;
                font-family: 'Avenir';
                font-size: 18px; 
                color: "#222";
            }

            .axis path,
            .axis line {
                fill: none;
                stroke: black;
                shape-rendering: crispEdges;
            }

/*            these are SVG properties that we are styling here hence fill rather than color, etc*/

            .axis text {
                font-family: sans-serif;
                font-size: 11px;
            }
        </style>
    </head>
    <body>

    <span>This section uses the scatter chart and introduces dynamic axis generation, transition chains, and clipping paths.</span>
    <p>Click this text to update the chart with new data values as many times as you wish.</p>

    <script type="text/javascript">

    var scatW = 500;
    var scatH = 300;
    var padding = 30; 

    var scatter_data = [];
    var numDataPoints = 50;
    var maxRange = Math.random() * 1000; 

    for (var i = 0; i < numDataPoints; i++) {
        var newNumber1 = Math.floor(Math.random() * maxRange);
        var newNumber2 = Math.floor(Math.random() * maxRange);
        scatter_data.push([newNumber1, newNumber2]);
    }

    var xScale = d3.scale.linear()
                        .domain([0, d3.max(scatter_data, function(d) { return d[0]; })])
                        .range([padding, scatW-padding*2]);

    var yScale = d3.scale.linear()
                        .domain([0, d3.max(scatter_data, function(d) { return d[1]; })])
                        .range([scatH-padding, padding]);

    var xAxis = d3.svg.axis()
                        .scale(xScale)
                        .orient("bottom")
                        .ticks(5);

    var yAxis = d3.svg.axis()
                        .scale(yScale)
                        .orient("left")
                        .ticks(5);

    var scatterSVG = d3.select("body")
            .append("svg")
            .attr("width", scatW)
            .attr("height", scatH);

    // this sets a rectangle shape as a clipping path

    scatterSVG.append("clipPath")
        .attr("id", "chart-area")
        .append("rect")
        .attr("x", padding)
        .attr("y", padding)
        .attr("width", scatW - padding * 3)
        .attr("height", scatH - padding * 2);

    // note how the rectangular clipping path mask is applied
    // nb : the attribute name is clip-path but the element name is clipPath

    scatterSVG.append("g")
                .attr("id", "circles")
                .attr("clip-path", "url(#chart-area)")
                .selectAll("circle")
                .data(scatter_data)
                .enter()
                .append("circle")
                .attr("cx", function(d) { return xScale(d[0]); })
                .attr("cy", function(d) { return yScale(d[1]); })
                .attr("r", 2);

    scatterSVG.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + (scatH - padding) + ")")
                .call(xAxis);

    scatterSVG.append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + padding + ",0)")
                .call(yAxis);

    d3.select("p")
        .on("click", function() {

            var numValues = scatter_data.length;
            var maxRange = Math.random()*1000; 
            scatter_data = [];
            for (var i =0; i < numValues; i++) {
                var newNumber1 = Math.floor(Math.random() * maxRange);
                var newNumber2 = Math.floor(Math.random() * maxRange);
                scatter_data.push([newNumber1, newNumber2]);
            };

        xScale.domain([0, d3.max(scatter_data, function(d) { return d[0]; })]);
        yScale.domain([0, d3.max(scatter_data, function(d) { return d[1]; })]);

        scatterSVG.selectAll("circle")
                    .data(scatter_data)
                    .transition()
                    .duration(1000)
                    .each("start", function() {
                        d3.select(this)
                            .attr("fill", "magenta")
                            .attr("r", 7);
                    })
                    .attr("cx", function(d) { return xScale(d[0]); })
                    .attr("cy", function(d) { return yScale(d[1]); })
                    .each("end", function() {
                       d3.select(this)
                         .transition()
                         .duration(1000)
                         .attr("fill", "black")
                         .attr("r", 2);
                   });

        // selects the applicable axis, initiates a transition, calls the axis generator

        scatterSVG.select(".x.axis")
                .transition()
                .duration(1000)
                .call(xAxis);

        scatterSVG.select(".y.axis")
                .transition()
                .duration(1000)
                .call(yAxis);

        });

    </script>
    </body>
</html>